#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
# parse args
BUILD_DIR=$1
CACHE_DIR=$2

# source in common functions
. $BIN_DIR/common.sh

GRAILS_DIR=".grails"


check_build_status()
{
  if [ "${PIPESTATUS[*]}" != "0 0" ]; then
    echo " !     Failed to build app"
    exit 1
  fi
}

install_grails()
{
  VER_TO_INSTALL=$1
  GRAILS_URL="http://s3.amazonaws.com/heroku-jvm-buildpack-grails/grails-$VER_TO_INSTALL.tar.gz"

  GRAILS_TAR_FILE="grails-heroku.tar.gz"
  echo "-----> Installing Grails $VER_TO_INSTALL....."
  curl --silent --max-time 150 --location $GRAILS_URL -o $GRAILS_TAR_FILE

  # Error checking
  if [ ! -f $GRAILS_TAR_FILE ]; then
    echo "-----> Error downloading Grails framework. Please try again..."
    exit 1
  fi
  if [ -z "`file $GRAILS_TAR_FILE | grep gzip`" ]; then
    echo "-----> Error installing Grails framework or unsupported Grails framework version specified. Please review Dev Center for a list of supported versions."
    exit 1
  fi

  tar xzf $GRAILS_TAR_FILE
  rm $GRAILS_TAR_FILE

  echo "-----> Done"
}

if [ ! -f $BUILD_DIR/application.properties ] ; then
    echo "-----> File not found: application.properties. This file is required. Build failed."
    echo " !     Failed to build app"
    exit 1
fi
    
GRAILS_VERSION=$(get_property $BUILD_DIR/application.properties 'app.grails.version')

echo "-----> Grails $GRAILS_VERSION app detected"
echo "       WARNING: The Grails buildpack is currently in Beta."

if [ ! -d $CACHE_DIR ] ; then
  mkdir $CACHE_DIR
fi

cd $CACHE_DIR

# install grails
if [ ! -d $GRAILS_DIR ]; then
  install_grails $GRAILS_VERSION
else
  INSTALLED_GRAILS_VERSION=$(get_property $GRAILS_DIR/build.properties 'grails.version')
  if [ "$INSTALLED_GRAILS_VERSION" != "$GRAILS_VERSION" ] ; then
    echo "-----> Updating Grails version. Previous version was $INSTALLED_GRAILS_VERSION. Updating to $GRAILS_VERSION..."
    rm -rf $GRAILS_DIR
    install_grails $GRAILS_VERSION
  fi
fi

# This is a simplisitic way to only set JAVA_HOME when on Cedar. If you run this 
# script locally and your jdk is not in this location, you're responsible for
# setting it yourself. Need to find a smarter way of conditionally setting this var
if [ -d /usr/lib/jvm/java-6-openjdk ] ; then
    export JAVA_HOME=/usr/lib/jvm/java-6-openjdk
fi
export GRAILS_HOME=$CACHE_DIR/$GRAILS_DIR
export PATH=$GRAILS_HOME/bin:$PATH

cd $BUILD_DIR

# if grails cache directory doesn't exist create it
if [ ! -d $CACHE_DIR/.grails_cache ]; then
  mkdir $CACHE_DIR/.grails_cache
fi

# Cache priming option
# if a populated cache was checked in copy it into the cache
# remove the checked in cache dir aftewards to save slug size
if [ -d ivy-cache ]; then
  echo "-----> Found ivy-cache directory in the repo. Using it to prime the cache"
  cp -r ivy-cache $CACHE_DIR/.grails_cache/
  rm -r ivy-cache
fi

# create .grails directory in the user home and write a settings.groovy that points grails
# at the correct cache directory
if [ ! -d $HOME/.grails ]; then
  mkdir $HOME/.grails
fi

echo "grails.dependency.cache.dir = '$CACHE_DIR/.grails_cache'" >> $HOME/.grails/settings.groovy

# build app
if [ "$GRAILS_VERSION" != "1.3.7" ] ; then
    BUILDCMD_OPT="-plain-output"
fi

COMPILECMD="grails -Divy.default.ivy.user.dir=$CACHE_DIR compile --non-interactive"
echo "-----> Executing $COMPILECMD"
eval "$COMPILECMD" | sed -u 's/^/       /'
check_build_status

BUILDCMD="grails $BUILDCMD_OPT -Divy.default.ivy.user.dir=$CACHE_DIR war --non-interactive"
echo "-----> Executing $BUILDCMD"
eval "$BUILDCMD" | sed -u 's/^/       /'
check_build_status

if [ ! -d server ] ; then
    JETTY_RUNNER_VERSION=7.5.4.v20111024

    echo "-----> No server directory found. Adding jetty-runner $JETTY_RUNNER_VERSION automatically."
    mkdir server
    cp $GRAILS_HOME/jetty-runner-$JETTY_RUNNER_VERSION.jar server/jetty-runner.jar
    echo "vendored:$JETTY_RUNNER_VERSION" > server/jettyVersion
    echo "vendored:$JETTY_RUNNER_VERSION" > $CACHE_DIR/jettyVersion
fi

mktmpdir() {
  dir=$(mktemp -t fakesu-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2

WGET_BUILD="$(mktmpdir wget)"
DEBOOTSTRAP_BUILD="$(mktmpdir debootstrap)"
FAKECHROOT_BUILD="$(mktmpdir fakechroot)"

mkdir -p $BUILD_DIR/.tools/fakechroot
mkdir -p $CACHE_DIR/.tools/{wget,debootstrap}

export PATH=/sbin:/usr/sbin:$PATH:$CACHE_DIR/.tools/wget/bin:$CACHE_DIR/.tools/debootstrap/usr/sbin:$BUILD_DIR/.tools/fakechroot/sbin:$BUILD_DIR/.tools/fakechroot/bin
export DEBOOTSTRAP_DIR=$CACHE_DIR/.tools/debootstrap/usr/share/debootstrap

echo "-----> Fetching and installing wget"
cd $WGET_BUILD
curl -O http://ftp.gnu.org/gnu/wget/wget-1.13.4.tar.bz2 >/dev/null 2>&1
tar jxvf wget-1.13.4.tar.bz2 >/dev/null 2>&1
cd wget-1.13.4
./configure --prefix=$CACHE_DIR/.tools/wget --without-ssl >/dev/null 2>&1
make >/dev/null 2>&1
make install >/dev/null 2>&1
echo "wget installed" | indent

echo "-----> Fetching and installing debootstrap"
cd $DEBOOTSTRAP_BUILD
wget http://archive.ubuntu.com/ubuntu/pool/main/d/debootstrap/debootstrap_1.0.38.tar.gz >/dev/null 2>&1
tar zxvf debootstrap_1.0.38.tar.gz >/dev/null
cd debootstrap
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make >/dev/null
DESTDIR=$CACHE_DIR/.tools/debootstrap fakeroot make install >/dev/null
echo "debootstrap installed" | indent

echo "-----> Fetching, installing and vendoring fakechroot into /app/.tools/fakechroot/"
cd $FAKECHROOT_BUILD
git clone git://github.com/fabiokung/fakechroot.git >/dev/null
cd fakechroot
./autogen.sh >/dev/null 2>&1
./configure --prefix=$BUILD_DIR/.tools/fakechroot >/dev/null
make >/dev/null
make install >/dev/null
echo "fakechroot vendored" | indent

cd $BUILDPACK_DIR
echo "-----> Bootstraping a new base ubuntu lucid into /app/.root/"
mkdir -p $BUILD_DIR/.root
fakechroot -s fakeroot debootstrap --no-check-gpg --variant=fakechroot lucid $BUILD_DIR/.root >/dev/null
fakechroot fakeroot chroot $BUILD_DIR/.root apt-get install -y --force-yes gpgv >/dev/null 2>&1
echo "/app/.root bootstraped" | indent

sed -i -e "s/#force_color_prompt=yes/force_color_prompt=yes/" $BUILD_DIR/.root/root/.bashrc
echo "export PATH=/sbin:/usr/sbin:\$PATH" >> $BUILD_DIR/.root/root/.bashrc
echo "cd $HOME" >> $BUILD_DIR/.root/root/.bashrc

echo "-----> Updating packages"
fakechroot fakeroot chroot $BUILD_DIR/.root bash -c "cat > /etc/apt/sources.list <<EOF
deb http://archive.ubuntu.com/ubuntu lucid main universe
deb http://archive.ubuntu.com/ubuntu lucid-security main
deb http://archive.ubuntu.com/ubuntu lucid-updates main
EOF"
fakechroot fakeroot chroot $BUILD_DIR/.root apt-get update >/dev/null
echo "packages updated" | indent

cd $BUILD_DIR/.root
ln -s ../ app

mkdir -p $BUILD_DIR/bin
cp $BUILDPACK_DIR/bin/fakesu $BUILD_DIR/bin
cp $BUILDPACK_DIR/bin/aws $BUILD_DIR/bin

#Lets attempt to install the opencv binaries
echo "Installing video capute libraries"
apt-get install libavformat-dev libswscale-dev

echo "getting the opencv binaries"
echo "adding new apt repository ppa:gijzelaar/opencv2 "
add-apt-repository ppa:gijzelaar/opencv2
echo "running apt-get update"
apt-get update
echo "attempting to install opencv"
apt-get install opencv
echo "Attempt to install opencv completed"
